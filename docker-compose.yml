

services:
  db:
    image: postgres:16-alpine # 使用輕量級的 PostgreSQL 映像
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data # 將資料儲存到 volume，防止容器刪除時資料丟失
    ports:
      - "5432:5432" # 將容器的 5432 埠映射到主機的 5432 埠

  web:
    # --- 請修改這裡的 build 區塊 ---
    build:
      context: .
      dockerfile: Dockerfile
      args: {} # 您目前可能不需要 args，但為了完整性保留
    
    command: sh -c "uv run python app.py" # 執行 Flask 應用程式 (注意，實際生產環境會用 Gunicorn/Waitress)
    # command: sh -c "gunicorn -w 4 -b 0.0.0.0:5000 app:app" # 生產環境建議用 Gunicorn
    volumes:
      - .:/app # 將當前目錄映射到容器的 /app 目錄，方便程式碼修改後自動更新
    ports:
      - "5000:5000" # 將容器的 5000 埠映射到主機的 5000 埠
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME} # 連接到 db 服務
      FLASK_DEBUG: 1 # 開啟 Flask 的除錯模式
    depends_on:
      - db # 確保 db 服務在 web 服務之前啟動

volumes:
  pgdata: # 定義一個 volume 來持久化 PostgreSQL 資料